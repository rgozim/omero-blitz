plugins {
    id "java-library"
    id 'maven-publish'
    id 'org.openmicroscopy.blitz' version '5.5.0-SNAPSHOT'
    id 'com.zeroc.gradle.ice-builder.slice' version '1.5.0-SNAPSHOT'
}

group = 'org.openmicroscopy'
version = '5.5.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://artifacts.openmicroscopy.org/artifactory/maven/' }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    api 'org.openmicroscopy:omero-server:5.5.0-SNAPSHOT'

    implementation 'com.sun.activation:javax.activation:1.2.0'

    implementation 'org.ini4j:ini4j:0.4.1'

    implementation 'commons-beanutils:commons-beanutils:1.9.3'
    implementation 'org.apache.xmlgraphics:batik-all:1.9.1'
    implementation 'org.apache.httpcomponents:httpclient:4.5.6'
    implementation 'org.apache.httpcomponents:httpmime:4.5.6'

    implementation 'gnu.getopt:java-getopt:1.0.13'
    implementation 'net.sf.ehcache:ehcache:2.10.6'
}

if (slice.iceVersion.contains('3.7')) {
    slice.output = file('src/generated/ice37')
    dependencies {
        implementation 'com.zeroc:icegrid:3.7.+'
        implementation 'com.zeroc:icestorm:3.7.+'
    }
    sourceSets.main.java {
        srcDirs 'src/main/ice37', slice.output
    }
} else if (slice.iceVersion.contains('3.6')) {
    slice.output = file('src/generated/ice36')
    dependencies {
        implementation 'com.zeroc:icegrid:3.6.+'
        implementation 'com.zeroc:icestorm:3.6.+'
    }
    sourceSets.main.java {
        srcDirs 'src/main/ice36', slice.output
    }
}

ext {
    pythonOutputDir = "$buildDir/toArchive/python"
    generatedDir = "src/generated"
}

clean {
    delete generatedDir
}

/**
 * Creates .combined files that can then be split into sources.
 * In this instance, we're splitting out .java and .ice files
 * from .combined files.
 **/
blitz {
    database "psql"

    singleFile {
        iceMap {
            template "java_ice_map.vm"
            outputFile "java/omero/util/IceMap.java"
        }

        modelObjectFactoryRegistry {
            template "java_obj_reg.vm"
            outputFile "java/omero/util/ModelObjectFactoryRegistry.java"
        }

        objectFactoryRegistrar {
            template "py_obj_reg.vm"
            outputFile "$pythonOutputDir/omero/ObjectFactoryRegistrar.py"
        }
    }


//    api {
//        java {
//            language "java"
//            outputDir "java/omero/model"
//        }
//
//        ice {
//            language "ice"
//            outputDir "slice/omero/model"
//            outputName "\$1"
//        }
//
//        python {
//            language "python"
//            outputDir pythonOutputDir
//            outputName "omero_model_\$1I"
//        }
//    }
}


//slice {
//    java {
//        include = [file("src/generated/slice")]
//        files = fileTree(dir: file("src/generated/slice"), include: '**/*.ice')
//        args = "--tie"
//    }
//}
//
//task copySliceFiles(type: Copy, dependsOn: "splitIce") {
//    from "src/main/slice"
//    into "src/generated/slice"
//}
//
//tasks.addRule('Pattern: pythonTask<ID>') { String taskName ->
//    if (taskName.startsWith('pythonTask')) {
//        def id = taskName.replace("pythonTask", "")
//        def camel = id.substring(0, 1).toLowerCase() + id.substring(1)
//        def dir = camel.replaceAll("([A-Z])", '/$1').toLowerCase()
//        def dirAsPrefix = dir.replace("/", "_") + "_"
//
//        task(taskName, type: com.zeroc.gradle.icebuilder.slice.PythonTask, dependsOn: "copySliceFiles") {
//            includeDirs = "src/generated/slice"
//            inputFiles = fileTree(dir: "src/generated/slice/${dir}", include: '**.ice')
//            outputDir = file("$pythonOutputDir")
//            prefix = dirAsPrefix
//        }
//    }
//}
//
//task pythonTaskGroup {
//    description "Runs all python tasks"
//    dependsOn = [
//            "generateObjectFactoryRegistrar",
//            "splitPython",
//            pythonTaskOmero,
//            pythonTaskOmeroModel,
//            pythonTaskOmeroCmd,
//            pythonTaskOmeroApi
//    ]
//}

// Set compileSlice to depend on the generation of ice files from "splitIce"
//compileSlice.dependsOn "copySliceFiles"
//
//// Set compileJava to additionally depend on "splitJava"
//compileJava.dependsOn "splitJava"

// Add publish functionality
//apply from: 'publish.gradle'






//task nestedSpecs(type: Copy) {
//    into "$buildDir/libs"
//    from(configurations.runtimeClasspath) {
//        include "*omero-model*"
//    }
//}
//
//plugins.withType(JavaPlugin) {
//    def artifact = configurations.runtimeClasspath
//            .resolvedConfiguration
//            .resolvedArtifacts
//            .find { item -> item.name.contains("omero-model") }
//
//    task importMps(type: Sync) {
//        into "$project.buildDir"
//        into ("mappings") {
//            from zipTree(artifact.file)
//            include "**/*.ome.xml"
//        }
//        into ("databaseTypes") {
//            from zipTree(artifact.file)
//            include "**/*-types*.properties"
//        }
//        includeEmptyDirs = false
//    }
//}

//task importMps(type: Sync) {
//    dependsOn configurations.runtimeClasspath
//    into "$project.buildDir/mappings"
//    include "**/*.ome.xml"
//    with copySpec
//}
